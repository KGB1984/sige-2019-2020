install.packages(c("corrplot", "funModeling", "Hmisc", "tidyverse"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(funModeling)
install.packages("Hmisc")
install.packages("latticeExtra")
library(png, lib.loc = "/usr/local/lib/R/site-library")
remove.packages("png", lib="/usr/local/lib/R/site-library")
install.packages("png")
install.packages("latticeExtra")
remove.packages("jpeg", lib="/usr/local/lib/R/site-library")
install.packages("jpeg")
install.packages("latticeExtra")
install.packages("Hmisc")
remove.packages("htmltools", lib="/usr/local/lib/R/site-library")
install.packages("htmltools")
remove.packages("digest", lib="/usr/local/lib/R/site-library")
install.packages("digest")
install.packages("htmltools")
install.packages("Hmisc")
remove.packages("httpuv", lib="/usr/local/lib/R/site-library")
install.packages("httpuv")
remove.packages("promises", lib="/usr/local/lib/R/site-library")
install.packages("promises")
install.packages("httpuv")
install.packages("Hmisc")
remove.packages("survival", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("survival")
install.packages("Hmisc")
remove.packages("base64enc", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("base64enc")
install.packages("Hmisc")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(funModeling)
install.packages("funModeling")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(funModeling)
library(ggplot2)
library(Hmisc)
library(corrplot)
set.seed(1)
data_raw <- read_csv('LoanStats_2017Q4.csv', na = c('NA', 'n/a', '', ' '))  # n_max = 10000
head(data_raw)
status <- df_status(data_raw)
View(status)
status <- status %>%
filter(variable != 'loan_status')
zero_cols <- status %>%
filter(p_zeros > 90) %>%
select(variable)
View(zero_cols)
View(status)
na_cols <- status %>%
filter(p_na > 50) %>%
select(variable)
eq_cols <- status %>%
filter(unique <= 3) %>%
select(variable)
dif_cols <- status %>%
filter(unique > 0.75 * nrow(data_raw)) %>%
select(variable)
remove_cols <- bind_rows(
list(
zero_cols,
na_cols,
eq_cols,
dif_cols
)
)
data <- data_raw %>%
select(-one_of(remove_cols$variable))
View(remove_cols)
head(data)
df_status(data)
View(data)
data <- data %>%
filter(loan_status
%in%
c('Late (16-30 days)',
'Late (31-120 days)',
'In Grace Period',
'Charged Off',
'Current'))
ggplot(data) +
geom_histogram(aes(x = loan_status, fill = loan_status), stat = 'count')
data <- data %>%
mutate(loan_status = case_when(
loan_status == 'Late (16-30 days)'  ~ 'Unpaid',
loan_status == 'Late (31-120 days)' ~ 'Unpaid',
loan_status == 'In Grace Period'    ~ 'Unpaid',
loan_status == 'Charged Off'        ~ 'Unpaid',
loan_status == 'Current'            ~ 'Paid'))
ggplot(data) +
geom_histogram(aes(x = loan_status, fill = loan_status), stat = 'count')
data_num <- data %>%
na.exclude() %>%
mutate_if(is.character, as.factor) %>%
mutate_if(is.factor, as.numeric)
cor_target <- correlation_table(data_num, target='loan_status')
View(cor_target)
important_vars <- cor_target %>%
filter(abs(loan_status) >= 0.01)
data <- data %>%
select(one_of(important_vars$Variable))
View(important_vars)
data_num <- data %>%
na.exclude() %>%
mutate_if(is.character, as.factor) %>%
mutate_if(is.factor, as.numeric)
rcorr_result <- rcorr(as.matrix(data_num))
View(rcorr_result)
cor_matrix <- as.tibble(rcorr_result$r, rownames = "variable")
corrplot(rcorr_result$r, type = "upper", order = "original", tl.col = "black", tl.srt = 45)
v <- varclus(as.matrix(data_num), similarity="pearson")
View(v)
plot(v)
groups <- cutree(v$hclust, 25)
not_correlated_vars <- enframe(groups) %>%
group_by(value) %>%
sample_n(1)
View(not_correlated_vars)
enframe(groups)
data <- data %>%
select(one_of(not_correlated_vars$name))
groups
dataset = read.csv('Wine.csv')
dataset = read_csv('Wine.csv')
dataset = read.csv('Wine.csv')
dataset = read.csv('/media/karel/Trabajo/karel/decsai/2019-2020/SIGE/sige-2019-2020/Prácticas/01 Selección de variables/PCA/Wine.csv')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set
View(training_set)
training_set[-14]
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
library(caret)
library(caret)
# install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
install.packages("ElemStatLearn")
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'SVM (Test set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
dataset = read.csv('/media/karel/Trabajo/karel/decsai/2019-2020/SIGE/sige-2019-2020/Prácticas/01 Selección de variables/LDA/Wine.csv')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
library(MASS)
lda = lda(formula = Customer_Segment ~ ., data = training_set)
training_set = as.data.frame(predict(lda, training_set))
training_set = training_set[c(5, 6, 1)]
test_set = as.data.frame(predict(lda, test_set))
test_set = test_set[c(5, 6, 1)]
View(training_set)
library(e1071)
classifier = svm(formula = class ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('x.LD1', 'x.LD2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'LD1', ylab = 'LD2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('x.LD1', 'x.LD2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'SVM (Test set)',
xlab = 'LD1', ylab = 'LD2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
dataset = read.csv('/media/karel/Trabajo/karel/decsai/2019-2020/SIGE/sige-2019-2020/Prácticas/01 Selección de variables/PCA/Wine.csv')
View(dataset)
dataset = read.csv('/media/karel/Trabajo/karel/decsai/2019-2020/SIGE/sige-2019-2020/Prácticas/01 Selección de variables/PCA/Wine.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# Applying PCA
# install.packages('caret')
library(caret)
# install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
